有些语言， 比如 C, 通过函数输出数据到屏幕，例如函数rintf()。然而在Python 和大多数解释执行的脚本语言，使用语句进行输出。很多的shell 脚本语言使用echo 命令来输出程序结果。
 
Python 的print 语句，与字符串格式运算符( % )结合使用，可实现字符串替换功能，这一点和 C 语言中的printf()函数非常相似：
 print "%s is number %d!" % ("Python", 1)
 
从用户那里得到数据输入的最容易的方法是使用raw_input()内建函数。 它读取标准输入，并将读取到的数据赋值给指定的变量。 你可以使用 int() 内建函数将用户输入的字符串转换为整数。
>>> user = raw_input('Enter login name: ')
Enter login name: root
>>> print 'Your login is:', user>>> print 'Your login is:', user
Your login is: root
 
内建函数int()将数值字符串转换成整数值，这样才可以对它进行数学运算。
 
在学习Python 的过程中，如果需要得到一个生疏函数的帮助，只需要对它调用内建函数help()。通过用函数名作为help()的参数就能得到相应的帮助信息：
 
和大部分脚本及Unix-shell 语言一样，Python 也使用 # 符号标示注释，从# 开始，直到一行结束的内容都是注释。
有一种叫做文档字符串的特别注释。你可以在模块、类或者函数的起始添加一个字符串，起到在线文档的功能，这是Java 程序员非常熟悉的一个特性。
def foo():
"This is a doc string."
return True
与普通注释不同，文档字符串可以在运行时访问，也可以用来自动生成文档。
 
和其他绝大多数的语言一样，Python 中的标准算术运算符以你熟悉的方式工作
+ - * / // % **
Python 当然也有标准比较运算符， 比较运算根据表达式的值的真假返回布尔值：
< <= > >= == != <>
Python 也提供了逻辑运算符：
and or not
 
合理使用括号增强代码的可读性，在很多场合使用括号都是一个好主意，而没用括号的话，会使程序得到错误结果，或使代码可读性降低，引起阅读者困惑。。括号在Python语言中不是必须存在的， 不过为了可读性， 使用括号总是值得的。任何维护你代码的人会感谢你， 在你再次阅读自己的代码时，你也会感谢你自己。
 
变量名仅仅是一些字母开头的标识符－－所谓字母开头－－意指大写或小写字母，另外还包括下划线 _ ). 其它的字符可以是数字，字母， 或下划线。Python变量名是大小写敏感的， 也就是说变量 "cAsE" 与 "CaSe" 是两个不同的变量。
 
Python 是动态类型语言， 也就是说不需要预先声明变量的类型。 变量的类型和值在赋值那一刻被初始化。变量赋值通过等号来执行。
 
Python 也支持增量赋值，也就是运算符和等号合并在一起， 看下面的例子:
n = n * 10
将上面的例子改成增量赋值方式就是：
n *= 10
 
Python 支持五种基本数字类型，其中有三种是整数类型。
int (有符号整数
long (长整数
bool (布尔值)
float (浮点值)
complex (复数)
 
Python 中字符串被定义为引号之间的字符集合。Python 支持使用成对的单引号或双引号，三引号（三个连续的单引号或者双引号）可以用来包含特殊字符。使用索引运算符( [ ] )和切片运算符( [ : ] )可以得到子字符串。字符串有其特有的索引规则：第一个字符的索引是 0，最后一个字符的索引是 －1
加号( + )用于字符串连接运算，星号( * )则用于字符串重复.
 
可以将列表和元组当成普通的“数组”，它能保存任意数量任意类型的Python 对象。和数组一样，通过从 开始的数字索引访问元素，但是列表和元组可以存储不同类型的对象。
列表和元组有几处重要的区别。列表元素用中括号 [ ])包裹，元素的个数及元素的值可以改变。元组元素用小括号( ))包裹，不可以更改（尽管他们的内容可以）。元组可以看成是只读的列表。通过切片运算( [ ] 和 [ : ] )可以得到子集，这一点与字符串的使用方法一样。
 
字典是Python 中的映射数据类型，工作原理类似Perl 中的关联数组或者哈希表，由键值(key-value)对构成。几乎所有类型的Python 对象都可以用作键，不过一般还是以数字或者字符串最为常用。
值可以是任意类型的Python 对象，字典元素用大括号{ })包裹。
 
标准if 条件语句的语法如下：
if expression:
    if_suite
如果表达式的值非0 或者为布尔值True, 则代码组if_suite 被执行; 否则就去执行下一条语句。 代码组是一个ython 术语， 它由一条或多条语句组成，表示一个子代码块。Python与其它语言不同， 条件条达式并不需要用括号括起来。
Python 当然也支持 else 语句， 语法如下：
if expression:
    if_suite
else:
    else_suite
Python 还支持 elif （意指 “else-if ”）语句，语法如下:
if expression1:
    if_suite
elif expression2:
    elif_suite
else:
    else_suite
 
标准while 条件循环语句的语法类似if. 再说一次， 要使用缩进来分隔每个子代码块。
while expression:
    while_suite
 
语句 while_suite 会被连续不断的循环执行， 直到表达式的值变成 0 或 False; 接着python 会执行下一句代码。 类似if 语句， Python 的while 语句中的条件表达式也不需要用括号括起来。
 
Python 中的for 循环与传统的for 循环（计数器循环）不太一样， 它更象shell 脚本里的foreach 迭代。Python 中的for 接受可迭代对象（例如序列或迭代器）作为其参数，每次迭代其中一个元素。
for循环中print 语句默认会给每一行添加一个换行符。只要在print 语句的最后添加一个逗号(,)， 就可以改变它这种行为。
Python 提供了一个range()内建函数来生成数字列表如shell 中的seq
 
这是一个让人欣喜的术语， 表示你可以在一行中使用一个or 循环将所有值放到一个列表当中：
>>> squared = [x ** 2 for x in range(4)]
>>> sqdEvens = [x ** 2 for x in range(8) if not x % 2]
 
如何打开文件
handle = open(file_name, access_mode = 'r')
file_name 变量包含我们希望打开的文件的字符串名字， access_mode 中 'r' 表示读取，'w' 表示写入， 'a' 表示添加。其它可能用到的标声还有 '+' 表示读写， 'b'表示二进制访问 如果未提供 access_mode ， 默认值为'r'。如果 open() 成功， 一个文件对象句柄会被返回。所有后续的文件操作都必须通过此文件句柄进行。当一个文件对象返回之后， 我们就可以访问它的一些方法， 比如 readlines() 和close().文件对象的方法属性也必须通过句点属性标识法访问
 
下面有一些代码， 提示用户输入文件名， 然后打开一个文件， 并显示它的内容到屏幕上：
filename = raw_input('Enter file name: ')
fobj = open(filename, 'r')
for eachLine in fobj:
    print eachLine,
fobj.close()
 
file()内建函数是最近才添加到Python 当中的。它的功能等同于 open()， 不过ile()这个名字可以更确切的表明它是一个工厂函数。（生成文件对象）类似int()生成整数对象，dict()生成字典对象。
 
类似其它的语言， Python 中的函数使用小括号 () )调用。函数在调用之前必须先定义。如果函数中没有 return 语句， 就会自动返回 None 对象。
Python 是通过引用调用的。 这意味着函数内对参数的改变会影响到原始对象。不过事实上只有可变对象会受此影响， 对不可变对象来说， 它的行为类似按值调用。
定义一个函数的语法由 def 关键字及紧随其后的函数名再加上该函数需要的几个参数组成。函数参数（比较上面例子中的arguments)是可选的， 这也是为什么把它们放到中括号中的原因。（在你的代码里千万别写上中括号！）这个语句由一个冒号:)结束（与if 和while语句的结束方式一样）， 之后是代表函数体的代码组， 下面是一个简短的例子：
def addMe2Me(x):
    'apply + operation to argument'
    return (x + x)
 
函数的参数可以有一个默认值， 如果提供有默认值，在函数定义中， 参数以赋值语句的形式提供。事实上这仅仅是提供默认参数的语法，它表示函数调用时如果没有提供这个参数， 它就取这个值做为默认值。
>>> def foo(debug=True):
... 'determine if in debug mode with default argument'
... if debug:
... print 'in debug mode'
... print 'done'
...
>>> foo()
in debug mode
done
>>> foo(False)
done
 
类是面向对象编程的核心， 它扮演相关数据及逻辑的容器角色。它们提供了创建“真实”对象(也就是实例)的蓝图。因为ython 并不强求你以面向对象的方式编程（与Java 不同）
使用 class 关键字定义类。 可以提供一个可选的父类或者说基类 如果没有合适的基类，那就使用 object 作为基类。class 行之后是可选的文档字符串， 静态成员定义， 及方法定义。
class FooClass(object):
    """my very first class: FooClass"""
    version = 0.1 # class (data) attribute
    def __init__(self, nm='John Doe'):
        """constructor"""
        self.name = nm # class instance (data) attribute
        print 'Created a class instance for', nm
    def showname(self):
        """display instance attribute and class name"""
        print 'Your name is', self.name
        print 'My name is', self.__class__.__name__
    def showver(self):
        """display class(static) attribute"""
        print self.version # references FooClass.version
    def addMe2Me(self, x): # does not use 'self'
        """apply + operation to argument"""
        return x + x
fool=FooClass()
fool2=FooClass("lgp_test")
fool.addMe2Me(2)
fool.showname()
fool.showver()
fool2.showname()
在上面这个类中， 我们定义了一个静态变量 version, 它将被所有实例及四个方法共享，__init__()， showname(), showver(), 及熟悉的 addMe2Me(). 这些 show*()方法并没有做什么有用的事情， 仅仅输出对应的信息。 __init__() 方法有一个特殊名字， 所有名字开始和结束都有两个下划线的方法都是特殊方法。当一个类实例被创建时， __init__() 方法会自动执行， 在类实例创建完毕后执行， 类似构建函数。__init__() 可以被当成构建函数， 不过不象其它语言中的构建函数， 它并不创建实例--它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的 __init__() 方法， 你可以覆盖默认的 __init__()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。在这个例子里， 我们初始化了一个名为name的类实例属性（或者说成员）。这个变量仅在类实例中存在， 它并不是实际类本身的一部分。__init__()需要一个默认的参数， 前一节中曾经介绍过。毫无疑问，你也注意到每个方法都有的一个参数， self.
什么是 self ? 它是类实例自身的引用。其他语言通常使用一个名为this 的标识符。
每个方法的调用都返回我们期望的结果。比较有趣的数据是类名字。在showname()方法中，我们显示 self.__class__.__name__ 变量的值。对一个实例来说， 这个变量表示实例化它的类的名字。（self.__class__引用实际的类）。在我们的例子里， 创建类实例时我们并未传递名字参数， 因此默认参数'John Doe' 就被自动使用。
 
 
当你创建了一个Python 源文件，模块的名字就是不带.py 后缀的文件名。一个模块创建之后， 你可以从另一个模块中使用 import 语句导入这个模块来使用。
如何导入模块
import module_name
 
一旦导入完成， 一个模块的属性（函数和变量）可以通过熟悉的 .句点属性标识法访问。
module.function()
module.variable
 
dir([obj]) 显示对象的属性，如果没有提供参数， 则显示全局变量的名字
help([obj]) 以一种整齐美观的形式 显示对象的文档字符串， 如果没有提供任何参数， 则会进入交互式帮助。
int(obj) 将一个对象转换为整数
len(obj) 返回对象的长度
open(fn, mode) 以 mode('r' = 读， 'w'= 写方式打开一个文件名为fn 的文件
range([[start,]stop[,step]) 返回一个整数列表。起始值为start, 结束值为stop - 1; start默认值为0， step默认值为。
raw_input(str) 等待用户输入一个字符串， 可以提供一个可选的参数str 用作提示信息。
str(obj) 将一个对象转换为字符串
type(obj) 返回对象的类型（返回值本身是一个ype 对象！）

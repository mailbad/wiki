Python 使用对象模型来存储数据。构造任何类型的值都是一个对象。尽管Python 通常当成一种“面向对象的编程语言”，但你完全能够写出不使用任何类和实例的实用脚本。不过ython 的对象语法和架构鼓励我们使用这些特性，下面让我们仔细研究一下Python 对象。
 
所有的Python 对像都拥有三个特性：身份，类型和值。
每一个对象都有一个唯一的身份标识自己，任何对象的身份可以使用内建函数d()来得到。这个值可以被认为是该对象的内存地址。
您可以用内建函数type()查看Python 对象的类型。因为在Python 中类型也是对象、所以type()返回的是对象而不是简单的字符串。
对象表示的数据项为值
 
标准类型
数字（分为几个子类型，其中有三个是整型）
整型
布尔型
长整型
浮点型
复数型
字符串
列表
元组
字典
 
其他内建类型
类型
Null 对象 (None)
文件
集合/固定集合
函数方法
模块
类
 
所有类型对象的类型都是type,它也是所有Python 类型的根和所有Python 标准类的默认元类（metaclass）。
 
Python 有一个特殊的类型，被称作 Null 对象或者 NoneType，它只有一个值，那就是 None。它不支持任何运算也没有任何内建方法。
None 没有什么有用的属性，它的布尔值总是False。
 
所有标准对象均可用于布尔测试，同类型的对象之间可以比较大小。每个对象天生具有布尔True 或 False 值。空对象、值为零的任何数字或者Null 对象 None 的布尔值都是False。
下列对象的布尔值是False。
None
False (布尔类型)
所有的值为零的数：
0 (整型)
(浮点型)
0L (长整型)
0.0+0.0j (复数
"" (空字符串)
[] (空列表)
() (空元组
{} (空字典)
值不是上面列出来的任何值的对象的布尔值都是 True，例如non-empty、 non-zero 等等。用户创建的类实例如果定义了nonzero(__nonzero__())或length（__len__()）且值为，那么它们的布尔值就是 False。
 
内部类型
代码
帧
跟踪记录
切片
省略
Xrange
 
代码对象是编译过的Python 源代码片段，它是可执行对象。通过调用内建函数ompile()可以得到代码对象。代码对象可以被 exec 命令或 eval()内建函数来执行。
代码对象本身不包含任何执行环境信息， 它是用户自定义函数的核心， 在被执行时动态获得上下文。（事实上代码对象是函数的一个属性）一个函数除了有代码对象属性以外，还有一些其它函数必须的属性，包括函数名，文档字符串，默认参数，及全局命名空间等等。
 
帧对象表示 Python 的执行栈帧。帧对象包含Python 解释器在运行时所需要知道的所有信息。它的属性包括指向上一帧的链接，正在被执行的代码对象（参见上文），本地及全局名字空间字典以及当前指令等。每次函数调用产生一个新的帧，每一个帧对象都会相应创建一个 栈帧。用到帧对象的一个地方是跟踪记录对象
 
当你的代码出错时， Python 就会引发一个异常。如果异常未被捕获和处理， 解释器就会退出脚本运行，显示类似下面的诊断信息：
Traceback (innermost last):
File "", line N?, in ???
ErrorName: error reason
当异常发生时，一个包含针对异常的栈跟踪信息的跟踪记录对象被创建。如果一个异常有自己的处理程序，处理程序就可以访问这个跟踪记录对象。
 
当使用Python 扩展的切片语法时，就会创建切片对象。扩展的切片语法允许对不同的索引切片操作，包括步进切片， 多维切片，及省略切片。多维切片语法是 sequence[start1 : end1,start2 : end2]， 或使用省略号， sequence[...,start1 : end1 ].
 
省略对象用于扩展切片语法中，起记号作用。 这个对象在切片语法中表示省略号。类似Null 对象 None, 省略对象有一个唯一的名字 Ellipsis, 它的布尔值始终为True.
 
调用内建函数xrange() 会生成一个range 对象，xrange()是内建函数range()的兄弟版本， 用于需要节省内存使用或 range()无法完成的超大数据集场合。
 
对象值的比较，多个比较操作可以在同一行上进行，求值顺序为从左到右。
4 < 3 < 5 != 2 < 7 
False
 
a is b
这个表达式等价于下面的表达式
id(a) == id(b)
is 与 not 标识符都是 Python 关键字。
 
标准类型内建函数
cmp(obj1, obj2)	
比较obj1 和 obj2, 根据比较结果返回整数i:
i < 0 if obj1 < obj2
i > 0 if obj1 > obj2
i == 0 if obj1 == obj2
repr(obj) 或 `obj`	返回一个对象的字符串表示
str(obj)	返回对象适合可读性好的字符串表示
type(obj)	得到一个对象的类型，并返回相应的type 对象
 
type() 的用法如下：
type(object)
 
尽管str(),repr()和``运算在特性和功能方面都非常相似， 事实上 repr() 和 `` 做的是完全一样的事情，它们返回的是一个对象的“官方”字符串表示， 也就是说绝大多数情况下可以通过求值运算(使用eval()内建函数重新得到该对象，但str()则有所不同。str() 致力于生成一个对象的可读性好的字符串表示，它的返回结果通常无法用于eval()求值， 但很适合用于 print 语句输出。需要再次提醒一下的是， 并不是所有repr()返回的字符串都能够用eval()内建函数得到原来的对象：
 
双星号**)乘方运算和pow()内建函数，x ** y 和 pow(x,y) 执行的都是x 的y 次方。
 
type()返回任意Python 对象对象的类型，而不局限于标准类型。
 
通过内建函数d()来确认对象的身份在两次赋值前后发生了变
注意列表的值不论怎么改变， 列表的 ID 始终保持不变
 
这些大家熟悉的工厂函数在老的Python 版里被称为内建函数：
int(), long(), float(), complex()
str(), unicode(), basestring()
list(), tuple()
type()
以前没有工厂函数的其他类型，现在也都有了工厂函数。除此之外，那些支持新风格的类的全新的数据类型，也添加了相应的工厂函数。下面列出了这些工厂函数：
dict()
bool()
set(), frozenset()
object()
classmethod()
staticmethod()
super()
property()
file()
 
“基本”，是指这些类型都是Python 提供的标准或核心类型。
“内建”，是由于这些类型是Python 默认就提供的
“数据”，因为他们用于一般数据存储
“对象”，因为对象是数据和功能的默认抽象
“原始”，因为这些类型提供的是最底层的粒度数据存储
“类型”，因为他们就是数据类型
 
存储模型
分类Python 类型
标量/原子类型 数值（所有的数值类型），字符串（全部是文字）
容器类型 列表、元组、字典
 
更新模型
分类Python 类型
可变类型 列表， 字典
不可变类型 数字、字符串、元组
 
访问模型
分类Python 类型
直接访问数字
顺序访问字符串、列表、元组
映射访问字典
 
Python 没有 char 或 byte 类型来保存单一字符或8 比特整数。你可以使用长度为 的字符串表示字符或8 比特整数。

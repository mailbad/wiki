语句和语法
Python 语句中有一些基本规则和特殊字符：
井号#)表示之后的字符为Python 注释
换行 (\n) 是标准的行分隔符（通常一个语句一行）
反斜线( \ ) 继续上一行
分号( ; )将两个语句连接在一行中
冒号( : ) 将代码块的头和体分开
语句（代码块）用缩进块的方式体现
不同的缩进深度分隔不同的代码块
Python 文件以模块的形式组织
 
每一个ython 脚本文件都可以被当成是一个模块。模块以磁盘文件的形式存在。当一个模块变得过大，并且驱动了太多功能的话，就应该考虑拆一些代码出来另外建一个模块。模块里的代码可以是一段直接执行的脚本，也可以是一堆类似库函数的代码，从而可以被别的模块导入(import)调用。
 
链式赋值没问题
 y = x = x + 1
 
增量赋值
x = x + 1
x += 1
 
增量赋值通过使用赋值运算符，将数学运算隐藏在赋值过程当中。如果您用过、C++或者Java，会觉得下面的运算符很熟悉。
+=  -=  *=  /=  %=  **=
<<=  >>=  &=  ^=  |=
 
“多元”赋值
x, y, z = 1, 2, 'a string‘
x, y = 1, 2
x, y = y, x
 
Python 标识符字符串规则和其他大部分用C 编写的高级语言相似：
第一个字符必须是字母或下划线（_）
剩下的字符可以是字母和数字或下划线
大小写敏感
 
关键字：
and	as	assert	break
class	continue	def	del
elif	else	except	exec
finally	for	from	global
if	import	in	is
lambda	not	or	pass
print	raise	return	try
while	with	yield	None
 
 
_xxx 不用'from module import *'导入
__xxx__系统定义名字
__xxx 类中的私有变量名
核心风格：避免用下划线作为变量名的开始因为下划线对解释器有特殊的意义，而且是内建标识符所使用的符号，我们建议程序员避免用下划线作为变量名的开始。一般来讲，变量名_xxx 被看作是“私有的”，在模块或类外不可以使用。当变量是私有的时候，用_xxx 来表示变量是很好的习惯。因为变量名__xxx__对ython 来说有特殊含义，对于普通的变量应当避免这种命名风格。
 
 
Python 还提供了一个机制，可以通过_doc__特别变量，动态获得文档字串。在模块，类声明，或函数声明中第一个没有赋值的字符串可以用属性obj.__doc__来进行访问，其中obj是一个模块，类，或函数的名字。这在运行时刻也可以运行。
 
 
因为缩进对齐有非常重要的作用，您得考虑用什么样的缩进风格才让代码容易阅读。在选择要空的格数的时候，常识也起着非常大的作用。
1 或 2 可能不够，很难确定代码语句属于哪个块
8至10 可能太多，如果代码内嵌的层次太多，就会使得代码很难阅读。四个空格非常的流行，更不用说ython 的创造者也支持这种风格。五和六个也不坏，但是文本编辑器通常不支持这样的设置，所以也不经常使用。三个和七个是边界情况。
 
 
渐渐的，你会听到“Pythonic”这个术语，它指的是以 Python 的方式去编写代码、组织逻辑，及对象行为。更多时间过后，你才会真正理解它的含义。PEP 20 写的是 Python 之禅，你可以从那里开始你探索“Pythonic”真正含义的旅程。如果你不能上网，但想看到这篇诗句，那就从你的Python 解释器输入 import this 然后回车。下面是一些网上资源：
www.Python.org/doc/essays/styleguide.html
www.Python.org/dev/peps/pep-0007/
www.Python.org/dev/peps/pep-0008/
www.Python.org/dev/peps/pep-0020/
www.Python.org/dev/peps/pep-0257/
 
用模块来合理组织你的Python 代码是简单又自然的方法。你应该建立一种统一且容易阅读
的结构，并将它应用到每一个文件中去。下面就是一种非常合理的布局：
# (1) 起始行(Unix)
# (2) 模块文档
# (3) 模块导入
# (4) 变量定义
#(5) 类定义
#(6) 函数定义
#(7) 主程序
 
变量无须事先声明
变量无须指定类型
程序员不用关心内存管理
变量名会被“回收”
del 语句能够直接释放资源
 
对象的别名被显式的销毁。
del y # or del x
对象的一个别名被赋值给其它的对象
x = 123
对象被从一个窗口对象中移除
myList.remove(x)
窗口对象本身被销毁
del myList # or goes out-of-scope
 
Del 语句会删除对象的一个引用，它的语法是：
del obj1[, obj2[,... objN]]
例如，在上例中执行del y 会产生两个结果：
从现在的名字空间中删除 y
x 的引用计数减一
 
Python 代码风格指南（PEP8）, Python 快速参考和Python 常见问答都是开发者很重要的“工具”。另外， 还有一些模块会帮助你成为一个优秀的Python 程序员。
Debugger: pdb
Logger: logging
Profilers: profile, hotshot, cProfile
调试模块pdb 允许你设置（条件）断点，代码逐行执行，检查堆栈。它还支持事后调试。
logging 模块是在 Python2.3 中新增的， 它定义了一些函数和类帮助你的程序实现灵活的日志系统。共有五级日志级别： 紧急， 错误，警告，信息和调试。
